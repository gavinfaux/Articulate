{"version":3,"file":"theme-picker.element.js","sources":["../../../Client/src/components/theme-picker.element.ts"],"sourcesContent":["import { UmbElementMixin } from \"@umbraco-cms/backoffice/element-api\";\nimport { UmbChangeEvent } from \"@umbraco-cms/backoffice/event\";\nimport { css, customElement, html, property, state } from \"@umbraco-cms/backoffice/external/lit\";\nimport { UmbLitElement } from \"@umbraco-cms/backoffice/lit-element\";\nimport type {\n  UmbPropertyEditorConfigCollection,\n  UmbPropertyEditorUiElement,\n} from \"@umbraco-cms/backoffice/property-editor\";\nimport { UmbTextStyles } from \"@umbraco-cms/backoffice/style\";\nimport { Articulate } from \"../api/articulate/sdk.gen\";\nimport { extractErrorMessage } from \"../utils/error-utils\";\nimport { showUmbracoNotification } from \"../utils/notification-utils\";\n\n@customElement(\"articulate-theme-picker-element\")\nexport default class ArticulateThemePickerElement\n  extends UmbElementMixin(UmbLitElement)\n  implements UmbPropertyEditorUiElement\n{\n  @property()\n  value?: string;\n\n  @property({ attribute: false })\n  config?: UmbPropertyEditorConfigCollection;\n\n  @state()\n  private _themeSelectOptions: Array<{ name: string; value: string; selected?: boolean }> = [];\n\n  @state()\n  private _themeData: Array<{ name: string; value: string }> = [];\n\n  @state()\n  private _loading = false;\n\n  @state()\n  private _error = \"\";\n\n  constructor() {\n    super();\n    this._fetchThemes();\n  }\n\n  override updated(changedProperties: Map<PropertyKey, unknown>) {\n    super.updated(changedProperties);\n\n    const valueChanged = changedProperties.has(\"value\");\n    const themeDataChanged = changedProperties.has(\"_themeData\");\n\n    if (this._themeData.length > 0 && (valueChanged || themeDataChanged)) {\n      this._rebuildAndSetSelectOptions();\n    }\n  }\n\n  private async _fetchThemes() {\n    this._loading = true;\n    this._error = \"\";\n\n    try {\n      const result = await Articulate.getUmbracoManagementApiV1ArticulateEditorsThemes();\n\n      if (!result.response.ok) {\n        let errorToThrow;\n        try {\n          const problemDetails = await result.response.json();\n          errorToThrow = problemDetails;\n        } catch {\n          errorToThrow = new Error(\n            `API Error: ${result.response.status} ${result.response.statusText}`,\n          );\n        }\n        throw errorToThrow;\n      }\n\n      const data = result.data;\n      if (!data) {\n        throw new Error(\"No theme data returned from the server.\");\n      }\n\n      this._themeData = data.map((theme) => ({\n        name: theme,\n        value: theme,\n      }));\n      this._rebuildAndSetSelectOptions();\n    } catch (error: unknown) {\n      const errorMessage = extractErrorMessage(error, \"Failed to load themes\");\n      this._error = errorMessage;\n      await showUmbracoNotification(this, errorMessage, \"danger\");\n    } finally {\n      this._loading = false;\n    }\n  }\n\n  private _rebuildAndSetSelectOptions() {\n    if (!this._themeData || this._themeData.length === 0) {\n      if (this._themeSelectOptions.length > 0) {\n        this._themeSelectOptions = [];\n      }\n      return;\n    }\n\n    const valueToSelect = this.value;\n    const newOptions = this._themeData.map((theme) => ({\n      name: theme.name,\n      value: theme.value,\n      selected: !!valueToSelect && theme.value === valueToSelect,\n    }));\n\n    this._themeSelectOptions = newOptions;\n  }\n\n  private _handleInput(event: Event) {\n    const newValue = (event.target as any).value as string | undefined;\n\n    if (this.value !== newValue) {\n      this.value = newValue;\n      this.dispatchEvent(new UmbChangeEvent());\n    }\n  }\n\n  override render() {\n    if (this._loading) {\n      return html`<uui-loader></uui-loader>`;\n    }\n\n    if (this._error) {\n      return html` <uui-tag color=\"danger\">Could not load themes: ${this._error}</uui-tag> `;\n    }\n\n    return html`\n      <uui-select\n        .options=${this._themeSelectOptions}\n        .value=${this.value}\n        @change=${this._handleInput}\n        label=\"Select a theme\"\n      ></uui-select>\n    `;\n  }\n\n  static override readonly styles = [\n    UmbTextStyles,\n    css`\n      uui-select {\n        width: 100%;\n      }\n    `,\n  ];\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"articulate-theme-picker-element\": ArticulateThemePickerElement;\n  }\n}\n"],"names":["ArticulateThemePickerElement","UmbElementMixin","UmbLitElement","changedProperties","valueChanged","themeDataChanged","result","Articulate","errorToThrow","data","theme","error","errorMessage","extractErrorMessage","showUmbracoNotification","valueToSelect","newOptions","event","newValue","UmbChangeEvent","html","UmbTextStyles","css","__decorateClass","property","state","customElement"],"mappings":"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"}