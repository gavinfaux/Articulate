// This file is auto-generated by @hey-api/openapi-ts

export enum EventMessageTypeModel {
    DEFAULT = 'Default',
    INFO = 'Info',
    ERROR = 'Error',
    SUCCESS = 'Success',
    WARNING = 'Warning'
}

/**
 * Represents the options for exporting blog data in BlogML format.
 */
export type ExportBlogMlModel = {
    /**
     * Gets or sets the unique identifier of the Articulate node to export.
     */
    articulateNodeId: string;
    /**
     * Gets or sets a value indicating whether images should be exported as Base64-encoded strings in the BlogML file.
     */
    exportImagesAsBase64: boolean;
};

/**
 * Represents the options for importing blog data from a BlogML file.
 */
export type ImportBlogMlModel = {
    /**
     * Gets or sets the unique identifier of the Articulate node to import into.
     */
    articulateNodeId: string;
    /**
     * Gets or sets a value indicating whether to overwrite existing posts during import.
     */
    overwrite: boolean;
    /**
     * Gets or sets the regular expression pattern to match in post content during import.
     */
    regexMatch?: string | null;
    /**
     * Gets or sets the replacement string for the regular expression match in post content.
     */
    regexReplace?: string | null;
    /**
     * Gets or sets a value indicating whether to publish imported posts.
     */
    publish: boolean;
    /**
     * Gets or sets the temporary file name of the uploaded BlogML file.
     */
    tempFile: string;
    /**
     * Gets or sets a value indicating whether to export Disqus XML after import.
     */
    exportDisqusXml: boolean;
    /**
     * Gets or sets a value indicating whether to import the first image found in each post.
     */
    importFirstImage: boolean;
};

/**
 * Represents the result of a BlogML export or the Disqus export of and import operation, containing a download URL for the resulting file.
 */
export type ImportModel = {
    /**
     * Gets or sets the URL where the client can download the exported or processed file.
     */
    downloadUrl?: string | null;
};

export type NotificationHeaderModel = {
    message: string;
    category: string;
    type: EventMessageTypeModel;
};

/**
 * Represents the data required to copy an existing theme to a new theme name.
 */
export type PostCopyThemeModel = {
    /**
     * Gets or sets the name of the existing theme to copy.
     */
    themeName: string;
    /**
     * Gets or sets the new name for the copied theme.
     */
    newThemeName: string;
};

/**
 * Represents the response model for the BlogML post initialization.
 */
export type PostResponseModel = {
    /**
     * Gets or sets the temporary file name used for the uploaded BlogML file.
     */
    temporaryFileName?: string | null;
    /**
     * Gets or sets the number of posts detected in the BlogML file.
     */
    postCount: number;
};

export type ProblemDetails = {
    type?: string | null;
    title?: string | null;
    status?: number | null;
    detail?: string | null;
    instance?: string | null;
    [key: string]: unknown | (string | null) | (string | null) | (number | null) | (string | null) | (string | null) | undefined;
};

export type GetUmbracoManagementApiV1ArticulateBlogArchiveUdiData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/umbraco/management/api/v1/articulate/blog/archive/udi';
};

export type GetUmbracoManagementApiV1ArticulateBlogArchiveUdiErrors = {
    /**
     * The resource is protected and requires an authentication token
     */
    401: unknown;
    /**
     * The authenticated user does not have access to this resource
     */
    403: unknown;
    /**
     * The Articulate archive content type was not found.
     */
    404: unknown;
};

export type GetUmbracoManagementApiV1ArticulateBlogArchiveUdiResponses = {
    /**
     * The UDI as a string, example: umb://document/4fed18d8c5e34d5e88cfff3a5b457bf2
     */
    200: string;
};

export type GetUmbracoManagementApiV1ArticulateBlogArchiveUdiResponse = GetUmbracoManagementApiV1ArticulateBlogArchiveUdiResponses[keyof GetUmbracoManagementApiV1ArticulateBlogArchiveUdiResponses];

export type GetUmbracoManagementApiV1ArticulateBlogDownloadData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/umbraco/management/api/v1/articulate/blog/download';
};

export type GetUmbracoManagementApiV1ArticulateBlogDownloadErrors = {
    /**
     * The resource is protected and requires an authentication token
     */
    401: unknown;
    /**
     * The authenticated user does not have access to this resource
     */
    403: unknown;
};

export type GetUmbracoManagementApiV1ArticulateBlogDownloadResponses = {
    /**
     * Returns the BlogML XML file, example: BlogMlExport.xml
     */
    200: Blob | File;
};

export type GetUmbracoManagementApiV1ArticulateBlogDownloadResponse = GetUmbracoManagementApiV1ArticulateBlogDownloadResponses[keyof GetUmbracoManagementApiV1ArticulateBlogDownloadResponses];

export type PostUmbracoManagementApiV1ArticulateBlogExportData = {
    /**
     * Represents the options for exporting blog data in BlogML format.
     */
    body?: ExportBlogMlModel;
    path?: never;
    query?: never;
    url: '/umbraco/management/api/v1/articulate/blog/export';
};

export type PostUmbracoManagementApiV1ArticulateBlogExportErrors = {
    /**
     * The resource is protected and requires an authentication token
     */
    401: unknown;
    /**
     * The authenticated user does not have access to this resource
     */
    403: unknown;
};

export type PostUmbracoManagementApiV1ArticulateBlogExportResponses = {
    /**
     * Represents the result of a BlogML export or the Disqus export of and import operation, containing a download URL for the resulting file.
     */
    200: ImportModel;
};

export type PostUmbracoManagementApiV1ArticulateBlogExportResponse = PostUmbracoManagementApiV1ArticulateBlogExportResponses[keyof PostUmbracoManagementApiV1ArticulateBlogExportResponses];

export type GetUmbracoManagementApiV1ArticulateBlogExportDisqusData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/umbraco/management/api/v1/articulate/blog/export/disqus';
};

export type GetUmbracoManagementApiV1ArticulateBlogExportDisqusErrors = {
    /**
     * The resource is protected and requires an authentication token
     */
    401: unknown;
    /**
     * The authenticated user does not have access to this resource
     */
    403: unknown;
};

export type GetUmbracoManagementApiV1ArticulateBlogExportDisqusResponses = {
    /**
     * Returns the Disqus XML file, example: DisqusXmlExport.xml
     */
    200: Blob | File;
};

export type GetUmbracoManagementApiV1ArticulateBlogExportDisqusResponse = GetUmbracoManagementApiV1ArticulateBlogExportDisqusResponses[keyof GetUmbracoManagementApiV1ArticulateBlogExportDisqusResponses];

export type PostUmbracoManagementApiV1ArticulateBlogImportData = {
    /**
     * Represents the options for importing blog data from a BlogML file.
     */
    body?: ImportBlogMlModel;
    path?: never;
    query?: never;
    url: '/umbraco/management/api/v1/articulate/blog/import';
};

export type PostUmbracoManagementApiV1ArticulateBlogImportErrors = {
    /**
     * The resource is protected and requires an authentication token
     */
    401: unknown;
    /**
     * The authenticated user does not have access to this resource
     */
    403: unknown;
    /**
     * Import failed due to a server error.
     */
    500: ProblemDetails;
};

export type PostUmbracoManagementApiV1ArticulateBlogImportError = PostUmbracoManagementApiV1ArticulateBlogImportErrors[keyof PostUmbracoManagementApiV1ArticulateBlogImportErrors];

export type PostUmbracoManagementApiV1ArticulateBlogImportResponses = {
    /**
     * Represents the result of a BlogML export or the Disqus export of and import operation, containing a download URL for the resulting file.
     */
    200: ImportModel;
};

export type PostUmbracoManagementApiV1ArticulateBlogImportResponse = PostUmbracoManagementApiV1ArticulateBlogImportResponses[keyof PostUmbracoManagementApiV1ArticulateBlogImportResponses];

export type PostUmbracoManagementApiV1ArticulateBlogImportBeginData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/umbraco/management/api/v1/articulate/blog/import/begin';
};

export type PostUmbracoManagementApiV1ArticulateBlogImportBeginErrors = {
    /**
     * The resource is protected and requires an authentication token
     */
    401: unknown;
    /**
     * The authenticated user does not have access to this resource
     */
    403: unknown;
    /**
     * The request was not a valid form upload or the file was not XML.
     */
    415: unknown;
};

export type PostUmbracoManagementApiV1ArticulateBlogImportBeginResponses = {
    /**
     * Represents the response model for the BlogML post initialization.
     */
    200: PostResponseModel;
};

export type PostUmbracoManagementApiV1ArticulateBlogImportBeginResponse = PostUmbracoManagementApiV1ArticulateBlogImportBeginResponses[keyof PostUmbracoManagementApiV1ArticulateBlogImportBeginResponses];

export type GetUmbracoManagementApiV1ArticulateEditorsThemesData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/umbraco/management/api/v1/articulate/editors/themes';
};

export type GetUmbracoManagementApiV1ArticulateEditorsThemesErrors = {
    /**
     * The resource is protected and requires an authentication token
     */
    401: unknown;
    /**
     * The authenticated user does not have access to this resource
     */
    403: unknown;
};

export type GetUmbracoManagementApiV1ArticulateEditorsThemesResponses = {
    /**
     * Returns the list of available theme names.
     */
    200: Array<string>;
};

export type GetUmbracoManagementApiV1ArticulateEditorsThemesResponse = GetUmbracoManagementApiV1ArticulateEditorsThemesResponses[keyof GetUmbracoManagementApiV1ArticulateEditorsThemesResponses];

export type PostUmbracoManagementApiV1ArticulateThemesCopyData = {
    /**
     * Represents the data required to copy an existing theme to a new theme name.
     */
    body?: PostCopyThemeModel;
    path?: never;
    query?: never;
    url: '/umbraco/management/api/v1/articulate/themes/copy';
};

export type PostUmbracoManagementApiV1ArticulateThemesCopyErrors = {
    /**
     * The new theme name is already in use or the request is invalid.
     */
    400: ProblemDetails;
    /**
     * The resource is protected and requires an authentication token
     */
    401: unknown;
    /**
     * The authenticated user does not have access to this resource
     */
    403: unknown;
    /**
     * The source theme was not found.
     */
    404: ProblemDetails;
    /**
     * An internal server error occurred while copying the theme.
     */
    500: ProblemDetails;
};

export type PostUmbracoManagementApiV1ArticulateThemesCopyError = PostUmbracoManagementApiV1ArticulateThemesCopyErrors[keyof PostUmbracoManagementApiV1ArticulateThemesCopyErrors];

export type PostUmbracoManagementApiV1ArticulateThemesCopyResponses = {
    /**
     * Returns the name of the newly created theme.
     */
    200: string;
};

export type PostUmbracoManagementApiV1ArticulateThemesCopyResponse = PostUmbracoManagementApiV1ArticulateThemesCopyResponses[keyof PostUmbracoManagementApiV1ArticulateThemesCopyResponses];

export type GetUmbracoManagementApiV1ArticulateThemesListData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/umbraco/management/api/v1/articulate/themes/list';
};

export type GetUmbracoManagementApiV1ArticulateThemesListErrors = {
    /**
     * The resource is protected and requires an authentication token
     */
    401: unknown;
    /**
     * The authenticated user does not have access to this resource
     */
    403: unknown;
};

export type GetUmbracoManagementApiV1ArticulateThemesListResponses = {
    /**
     * Returns the list of available theme names.
     */
    200: Array<string>;
};

export type GetUmbracoManagementApiV1ArticulateThemesListResponse = GetUmbracoManagementApiV1ArticulateThemesListResponses[keyof GetUmbracoManagementApiV1ArticulateThemesListResponses];

export type ClientOptions = {
    baseUrl: 'https://localhost:44366' | (string & {});
};